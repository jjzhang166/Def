;-
    里程碑！vector 实现
-;


include "../macro/std.def"


type Kid (
    Int c
    Int d
)

type Pitor (
    Int x
    Int y
)


fun putchar(Kid k)(
    putchar k.c
    putchar k.d
)


fun putchar(Pitor p)(
    putchar p.x
    putchar p.y
)



;;;;;; 标准模板 vector 宏定义


let STL_VECTOR(T)(

type mcrlnk StlVector T (
    refer array T vptr
    Int max_length ; 总空间大小
    Int length ; 当前大小
    ; 构造
    fun mcrlnk StlVector T(Int sz)(
        length = 0
        max_length = sz ; 首次申请空间大小
        vptr = new array max_length T ; 首次分配空间
    )
    ; 析构函数(栈不支持)
    fun delete()(
        delete vptr
    )
    ; 长度
    fun Int size()(
        length
    )
    ; 末尾添加元素
    fun push(T v)(
        if eq length max_length (
            max_length = mul max_length 2 ; 空间大小倍增
            newvptr := new array max_length T ; 分配新空间
            i := length
            while i ( ; 拷贝所有元素
                i--
                newvptr[i] = (vptr[i])
            )
            delete vptr ; 释放旧空间
            vptr = newvptr
        )
        vptr[length] = v
        length = (length + 1)
    )
    ; 末尾弹出元素
    fun pop()(
        if length
            length = (length - 1)
        ret true
    )
    ; 访问末尾元素
    fun T last()(
        idx := length
        if idx 
            idx = (idx - 1)
        vptr[idx]
    )
    ; 下标访问
    fun T at(Int idx)(
        vptr[idx]
    )
)

)



;; 模板调用生成容器

STL_VECTOR Kid
STL_VECTOR Pitor


;; 容器初始化

veck := StlVectorKid 7
vecp := StlVectorPitor 13


;; 使用及访问

vecp:push Pitor 48 49
putchar vecp:at 0

; 调用析构函数

var nnn new Kid 1 2
delete nnn




;; 添加元素到容器

veck:push Kid 97  98
veck:push Kid 99  100
veck:push Kid 101 102
veck:push Kid 103 104
veck:push Kid 105 106
veck:push Kid 107 108
veck:push Kid 109 110


;; 打印所有元素


vecksz := (veck:size)
vecki := 0

while eq vecki vecksz (
    putchar veck:at vecki
    vecki++
)

while vecksz (
    vecksz--
    putchar veck:at vecksz
)




